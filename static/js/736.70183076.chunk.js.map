{"version":3,"file":"static/js/736.70183076.chunk.js","mappings":"oRAEaA,EAAWC,EAAAA,GAAAA,GAAH,6JAURC,EAAWD,EAAAA,GAAAA,GAAH,wG,mBC+CrB,EArDa,WACX,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAmBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,WAAMR,GAAN,yFAEjBM,GAAa,GAFI,UAGMG,EAAAA,EAAAA,IAAYT,GAHlB,gBAGTU,EAHS,EAGTA,KACRN,EAAaM,GACbC,QAAQC,IAAIF,GALK,kDAOjBG,MAAM,KAAMC,SAPK,yBASjBR,GAAa,GATI,6EAAH,sDAYlBE,EAAaR,EACd,GAAE,CAACA,KAGF,kCACGK,QADH,IACGA,EAAAA,GAAa,SAACU,EAAA,EAAD,KACd,iCACCZ,EAAUa,QACT,SAACnB,EAAD,UACGM,EAAUc,KAAI,SAAAC,GAAK,OAClB,UAACnB,EAAD,WACGmB,EAAMC,cACL,gBACEC,IAAG,yCAAoCF,EAAMC,cAC7CE,IAAKH,EAAMI,QAGb,gBACEF,IAAG,iEACHC,IAAKH,EAAMI,QAGf,wBAAKJ,EAAMI,QACX,uCAAeJ,EAAMK,eAbRL,EAAMM,GADH,OAmBtB,+EAIP,C,mMCvDKC,EAAW,+BACXC,EAAU,mCAGHC,EAAiB,mCAAG,sGACRC,EAAAA,EAAAA,IAAA,UAClBH,GADkB,OAHF,oBAGE,oBACmBC,IAFX,uBACvBG,EADuB,EACvBA,KADuB,kBAIxBA,GAJwB,2CAAH,qDAOjBC,EAAY,mCAAG,WAAM9B,GAAN,yFACH4B,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAzB,EADA,oBACmB0B,EADnB,oBADG,uBAClBG,EADkB,EAClBA,KADkB,kBAInBA,GAJmB,2CAAH,sDAOZpB,EAAW,mCAAG,WAAMT,GAAN,yFACF4B,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAzB,EADA,4BAC2B0B,EAD3B,oBADE,uBACjBG,EADiB,EACjBA,KADiB,kBAIlBA,GAJkB,2CAAH,sDAOXE,EAAU,mCAAG,WAAM/B,GAAN,yFACD4B,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAzB,EADA,4BAC2B0B,EAD3B,oBADC,uBAChBG,EADgB,EAChBA,KADgB,kBAIjBA,GAJiB,2CAAH,sDAOVG,EAAgB,mCAAG,WAAMC,GAAN,yFACPL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,kBACgCO,EADhC,+CADO,uBACtBJ,EADsB,EACtBA,KADsB,kBAIvBA,GAJuB,2CAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/API.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-around;\n  gap: 20px;\n\n  margin-top: 12px;\n`;\n\nexport const CastItem = styled.li`\n  width: calc((100% - 196px) / 5);\n  height: 400px;\n  word-wrap: break-word;\n`;\n","import { useParams } from 'react-router-dom';\nimport { getCastById } from '../../services/API';\nimport { useEffect, useState } from 'react';\nimport { CastItem, CastList } from './Cast.styled';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [castMovie, setCastMovie] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  // const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const getCastMovie = async movieId => {\n      try {\n        setIsLoading(true);\n        const { cast } = await getCastById(movieId);\n        setCastMovie(cast);\n        console.log(cast);\n      } catch (error) {\n        alert(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getCastMovie(movieId);\n  }, [movieId]);\n\n  return (\n    <div>\n      {isLoading ?? <Loader />}\n      <h2>Cast</h2>\n      {castMovie.length ? (\n        <CastList>\n          {castMovie.map(actor => (\n            <CastItem key={actor.id}>\n              {actor.profile_path ? (\n                <img\n                  src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`}\n                  alt={actor.name}\n                />\n              ) : (\n                <img\n                  src={`https://dummyimage.com/200x300/f2eaf2/34343b.jpg&text=No+image`}\n                  alt={actor.name}\n                />\n              )}\n              <h3>{actor.name}</h3>\n              <p>Character: {actor.character}</p>\n            </CastItem>\n          ))}\n        </CastList>\n      ) : (\n        <p>We don't have any information about the cast yet.</p>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '5de976d9fa7c36b2117f7a9c7cc0a525';\nconst TRENDING_PARAM = '/trending/all/day';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(\n    `${BASE_URL}${TRENDING_PARAM}?api_key=${API_KEY}`\n  );\n  return data;\n};\n\nexport const getMovieById = async movieId => {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\nexport const getCastById = async movieId => {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\nexport const getReviews = async movieId => {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\nexport const getMovieBySearch = async query => {\n  const { data } = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n  return data;\n};\n"],"names":["CastList","styled","CastItem","movieId","useParams","useState","castMovie","setCastMovie","isLoading","setIsLoading","useEffect","getCastMovie","getCastById","cast","console","log","alert","message","Loader","length","map","actor","profile_path","src","alt","name","character","id","BASE_URL","API_KEY","getTrendingMovies","axios","data","getMovieById","getReviews","getMovieBySearch","query"],"sourceRoot":""}